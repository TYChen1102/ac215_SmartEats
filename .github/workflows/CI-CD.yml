name: Continuous Integration and Continuous Deployment
run-name: ${{ github.actor }} submitted a CI CD Action
on:
  push:
    branches:
      - Milestone4  # Triggers when code is pushed to the Milestone4 branch

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Log basic workflow information
      - run: echo "Comment ${{ github.event.head_commit.message }}"
      - run: echo "Job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "Branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
        
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Authenticate with Google Cloud
      - id: 'auth'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.DEPLOYMENT }}'

      # Configure Google Cloud SDK
      - name: Configure Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # Install Docker Client
      - name: Configure Docker Client
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and run
        run: docker-compose up --build

      # Create secrets directory and files
      - name: Create secrets directory
        run: |
          mkdir -p ${{ github.workspace }}/secrets
          chmod 0777 ${{ github.workspace }}/secrets

      - name: Create secrets files
        run: |
          echo '${{ secrets.DEPLOYMENT }}' > ${{ github.workspace }}/src/food_classification/secrets/ac215-smarteat-437821-15c2f229e610.json
          
      # Log repository information
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."

      # List all files in the repository for debugging
      - name: List files in the repository
        run: |
          ls -R ${{ github.workspace }}

      # Build step1_food_classification container
      - name: Build Deployment Container 
        run: |-
          # cd ${{ github.workspace }}/src/food_classification/
          # docker build -t step1_food_classification -f Dockerfile .
          cd ${{ github.workspace }}/src_1container/
          sh docker-shell.sh
          
      # - name: List Docker images
        # run: docker images
          
      # Run step1_food_classification
      # - name: Run food classification (step1)
      #   run: |-
      #     docker run --rm --name step1_food_classification \
      #       -v /var/run/docker.sock:/var/run/docker.sock \
      #       -v $HOME/.ssh:/home/app/.ssh \
      #       -v ${{ github.workspace }}/tests:/app/tests \
      #       -v ${{ github.workspace }}/src:/app/src \
      #       -v ${{ github.workspace }}/coverage:/app/coverage \
      #       --volume $GITHUB_WORKSPACE:/workspace \
      #       --mount type=bind,source=${{ github.workspace }}/src/food_classification/secrets/ac215-smarteat-437821-15c2f229e610.json,target=/secrets/ac215-smarteat-437821-15c2f229e610.json \
      #       --env GOOGLE_APPLICATION_CREDENTIALS=/secrets/ac215-smarteat-437821-15c2f229e610.json \
      #       -e USE_GKE_GCLOUD_AUTH_PLUGIN=True \
      #       -e GCP_PROJECT=ac215-smarteat-437821 \
      #       -e GCP_ZONE=us-central1-a \
      #       step1_food_classification pytest --cov=/app/src --cov-report=html:/app/coverage
            
      - run: echo "Job's status is ${{ job.status }}."
      
      # # Build and run the deployment container
      # - name: Build Deployment Container 
      #   run: |
      #     # cd ${{ github.workspace }}/src/food_classification/
      #     # cd ${{ github.workspace }}/src_2containers/
      #     sh docker-shell.sh

      # - name: Run tests in Docker container with coverage
      #   run: |
      #     docker run --rm \
      #       -v ${{ github.workspace }}/src:/app/src \
      #       -v ${{ github.workspace }}/tests:/app/tests \
      #       -v ${{ github.workspace }}/coverage:/app/coverage \
      #       jsunsun/ms4_step1:latest pytest --cov=/app/src --cov-report=html:/app/coverage

      # Step 4: Upload coverage report as an artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage  # Path to the coverage report folder
