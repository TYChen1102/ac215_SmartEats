name: Continuous Integration and Continuous Deployment
run-name: ${{ github.actor }} submitted a CI CD Action
on:
  push:
    branches:
      - Milestone4  # Triggers when code is pushed to the Milestone4 branch

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - run: echo "Comment ${{ github.event.head_commit.message }}"
      - run: echo "Job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "Branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v4

      - id: 'auth'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'

      - name: Configure Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker Client
        run: |-
          gcloud auth configure-docker # --quiet #authenticate to gcr

      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      - name: Build Deployment Container
        run: |-
          mkdir -p ${{ github.workspace }}/htmlcov
          cd ${{ github.workspace }}/test_action/
          docker build -t m4_deployment -f Dockerfile .

      - name: Run Deploy App
        run: |-
          docker run --rm --name m4_deployment \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $HOME/.ssh:/home/app/.ssh \
            -v ${{ github.workspace }}/test_action:/test_action \
            -v ${{ github.workspace }}/secrets:/secrets \
            -v ${{ github.workspace }}/htmlcov:/test_action/htmlcov \
            --mount type=bind,source=${{ github.workspace }}/secrets/llm-service-account.json,target=/secrets/llm-service-account.json,readonly \
            -e USE_GKE_GCLOUD_AUTH_PLUGIN=True \
            -e GCP_PROJECT=ac215-project \
            -e GCP_ZONE=us-central1-a \
            m4_deployment \
            sh run-test.sh

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ${{ github.workspace }}/htmlcov # The folder where pytest-cov stores HTML reports

      - run: echo "Job's status is ${{ job.status }}."





# name: Continuous Integration and Continuous Deployment
# run-name: ${{ github.actor }} submitted a CI CD Action
# on:
#   push:
#     branches:
#       - Milestone4  # Triggers when code is pushed to the Milestone4 branch

# jobs:
#   test:
#     runs-on: ubuntu-latest

#     steps:
#       # Log basic workflow information
#       - run: echo "Comment ${{ github.event.head_commit.message }}"
#       - run: echo "Job was automatically triggered by a ${{ github.event_name }} event."
#       - run: echo "Job is now running on a ${{ runner.os }} server hosted by GitHub!"
#       - run: echo "Branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
        
#       # Step 1: Checkout the repository code
#       - name: Checkout code
#         uses: actions/checkout@v3
      
#       # Authenticate with Google Cloud
#       - id: 'auth'
#         uses: google-github-actions/auth@v1
#         with:
#           credentials_json: '${{ secrets.DEPLOYMENT }}'
          
#       # - name: Authenticate with GCP
#       #   env:
#       #     GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.DEPLOYMENT }}
          
#       # Configure Google Cloud SDK
#       - name: Configure Google Cloud SDK & Authenticate with GCP
#         env:
#           GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.DEPLOYMENT }}
#         uses: google-github-actions/setup-gcloud@v1 
    
#       # Install Docker Client
#       - name: Configure Docker Client
#         run: |
#           curl -fsSL https://get.docker.com -o get-docker.sh
#           sh get-docker.sh

#       - name: Set up Docker
#         uses: docker/setup-buildx-action@v2

#       - name: Install docker-compose
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y docker-compose
          
#       # Step 3: Install pytest and pytest-cov for coverage
#       - name: Install pytest and pytest-cov
#         run: |
#           python -m pip install --upgrade pip
#           pip install pytest pytest-cov
          
#       # - name: Build and run
#       #   run: docker-compose up --build

#       # Create secrets directory and files
#       - name: Create secrets directory
#         run: |
#           mkdir -p ${{ github.workspace }}/secrets
#           chmod 0777 ${{ github.workspace }}/secrets
 

#       - name: Create secrets files
#         run: |
#           echo '${{ secrets.DEPLOYMENT }}' > ${{ github.workspace }}/secrets/llm-service-account.json
#           chmod 644 ${{ github.workspace }}/secrets/llm-service-account.json
          
#       # Log repository information
#       - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
#       - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."

#       # List all files in the repository for debugging
#       - name: List files in the repository
#         run: |
#           ls -R ${{ github.workspace }}

#       # Build step1_food_classification container
#       # - name: Build Deployment Container 
#       #   run: |-
#       #     # cd ${{ github.workspace }}/src_1container/
#       #     # cd ${{ github.workspace }}/backend_container/
#       #     # sh docker-shell.sh

#       - name: Debug File Permissions
#         run: |
#           ls -l ${{ github.workspace }}/secrets/
#           cat ${{ github.workspace }}/secrets/llm-service-account.json

      
#       - name: Run Tests Inside Container
#         run: |
#           cd ${{ github.workspace }}/test_action/
#           docker build -t ms4_deployment -f Dockerfile .
#           docker run --name ms4_deployment --rm \
#             -v ${{ github.workspace }}/test_action:/app \
#             ms4_deployment \
#             pytest tests.py
#             # --mount type=bind,source=$GOOGLE_APPLICATION_CREDENTIALS,target=/secrets/llm-service-account.json \

#             # -e USE_GKE_GCLOUD_AUTH_PLUGIN=True \
#             # -e GCP_PROJECT=ac215-smarteat-437821 \
#             # -e GCP_ZONE=us-central1-a \
#             # --volume $GITHUB_WORKSPACE:/workspace \

#             # ls -l /secrets/ && cat /secrets/llm-service-account.json
            
#             # --mount type=bind,source=$GOOGLE_APPLICATION_CREDENTIALS,target=/secrets/llm-service-account.json \
#             # --env GOOGLE_APPLICATION_CREDENTIALS=/secrets/llm-service-account.json \
#             # -v /var/run/docker.sock:/var/run/docker.sock \
#             # -v $HOME/.ssh:/home/app/.ssh \

#             # pytest tests.py
            

            
#       # - name: Run Tests Inside Container
#       #   run: |
#       #     cd ${{ github.workspace }}/backend_container/
#       #     docker build -t ms4_deployment -f Dockerfile .
#       #     docker run --name ms4_deployment --rm \
#       #       --mount type=bind,source=$GOOGLE_APPLICATION_CREDENTIALS,target=/secrets/llm-service-account.json \
#       #       --env GOOGLE_APPLICATION_CREDENTIALS=/secrets/llm-service-account.json \
#       #       -e USE_GKE_GCLOUD_AUTH_PLUGIN=True \
#       #       -e GCP_PROJECT=ac215-smarteat-437821 \
#       #       -e GCP_ZONE=us-central1-a \
#       #       --volume $GITHUB_WORKSPACE:/workspace \
#       #       ms4_deployment \
#       #       -c "pytest --cov=. --cov-report=html"
            
#       #       # -v /var/run/docker.sock:/var/run/docker.sock \
#       #       # -v $HOME/.ssh:/home/app/.ssh \
#       #       # -v ${{ github.workspace }}/backend_container:/app \
#       #       # -v ${{ github.workspace }}/tests:/tests \


            
#       # # Step 4: Run pytest with coverage and generate HTML report
#       # - name: Run tests with coverage
#       #   run: |
#       #     pytest --cov=. --cov-report=html

#       # Step 5: Upload coverage report as an artifact
#       - name: Upload coverage report
#         uses: actions/upload-artifact@v3
#         with:
#           name: coverage-report
#           path: htmlcov  # The folder where pytest-cov stores HTML reports

#       - run: echo "Job's status is ${{ job.status }}."
      
